
div 구조잡기 ****************
css 적용방법
    - 인라인
    - 내부
    - 외부
선택자
    - 전체선택자
    - 태그선택자
    - id/class
        id :
        아이드는 중복이 안됨, '특정한 부분'
        선택자로 구분할 때 #으로 구분
        class :
        클래스는 중복이 가능 '특정 집단'
        선택자로 구분할 때 .으로 구분

        => id/class 속성을 부여할 때(이름을 지어줄 때)?
        * 가독성

        속성의 구조
        <div 속성 = "속성값" > < /div >
        ex) <div id="loginInput"> ... </div>
        ex) <input placeholder="아이디를 입력해주세요"/>
----------------------------------------------------------------------

    Emmet(VScode에서 지원)
        div#login
        => <div id="login"></div>

        축약형(단축키)

----------------------------------------------------------------------

    그룹선택자

        선택자1, 선택자2{
            ...CSS 문법
        }

        ex)

        p{color:red}
        div{color: red} --(x)

        p,div{color: red} --(o)

----------------------------------------------------------------------

    CSS의 가족

        HTML 가족 관계
            <div> ........ 부모
                <div></div> .. 자식
            <div>

            ex)
            <부모>
                ----<부모>태그 안의 모든 태그 자손관계

                <자식> ------ 자식또한 손자에게는 부모관계
                    <손자>
                        ................
                    </손자>
                </자식>
                <자식></자식>  ------- 첫번째 자식과 두번째 자식은 형제 관계
                <자식></자식>
                <자식></자식>
                <자식></자식>
                <자식></자식>
            </부모>
        
        
        자식 선택자
            부모 요소의 하위 자식 요소에만 스타일을 적용방법

        부모선택자 > 자식선택자{
            ... CSS문법
        }

        ex)
            div > p { //div태그 바로 밑의 p태그에만 스타일을 적용시켜줘
                color: red;
            }

        자손 선택자
            부모 요소의 하위의 모든 요소(태그)에 스타일을 적용하는 방법
            자손에는 자식,손자,후손 요소(태그)를 모두 포함

                조상요소선택자 자손요소선택자{
                    ... CSS문법
                }

            ex)
                div p{ //div태그 밑의 모든 p태그에 스타일을 적용 시켜줘
                    color: red;
                }

            ex)
                div > p span{ //div 바로 밑의 p태그 안에 모든 span 태그에 스타일을 적용시켜줘
                    color: red;
                } 
            
            ex)
                #header > div ul > li.login{
                    color: red;
                }

            ====> 이렇게 사용하는 이유
            1. 명확한 대상을 지명해서 css 우선순위를 높일 수 있다.
            2. 어떠한 요소가 어디에 있든 내가 불러올 수 있다.    

        형제 선택자
            - 일반 형제
                형제 관계를 갖는 요소 중에 형 요소 다음에 나오는<모든>
                동생 요소를 선택해 스타일을 적용하는 방법

                형 선택자 ~ 동생 선택자{
                    ...CSS문법
                }

                ex) a ~ li{
                    (앞에 a태그가 있는 모든 li태그 선택)
                    ...CSS문법
                }

                ex) => a태그의 아래 li(3개)만 동생 요소 (총3개)
                    <ul>
                        <li>
                        <a>
                        <li>
                        <li>
                        <li>
                    </ul>

            - 인접 형제

                형 선택자 + 동생 선택자{
                    ...CSS문법
                }

                ex) a + li {
                    (앞에 a태그가 있는 가장 가까운 li 태그만 선택)
                }

----------------------------------------------------------------------

            => 왜 가족선택자가 있는지?
            3. 중복된 css를 제거할 수 있다, 코드가 길어지는 것을 방지

----------------------------------------------------------------------

        <body>
            <div id="Wrapper">
                <div class="content">
                    안녕하세요
                </div>
            </div>

        body > #Wrapper > .content{
            color: red;
        }

        .content > div > red{
            color: red;
        }
----------------------------------------------------------------------

    속성 선택자
        HTML 요소에 src, href, type, name 등과 같은 다양한 속성을 
        선택자로 지정해서 스타일을 적용하는 방법

        1. 속성을 가지고 있는지 확인한 요소가
        [속성명] {
            CSS문법
        }

        2. 특정 속성에 특정 속성 값이 있는 요소를 선택 
        [속성명='속성값]{
            CSS문법
        }

        ex)
        [href]{
            color: red;
        }

        ex)
        [href="https://www.naver.com"]{
            color: blue;
        }

    속성 선택자 심화 : 자주 사용하지는 않음

        [속성명 = "속성값"] : 속성값이 완벽히 일치한 경우
        [속성명 ~= "속성값"] : 값이 속성값과 다른 값이 띄어쓰기로 구성
        [속성명 *= "속성값"] : 속성값이 포함된 문자를 가지고 있는 요소가
        [속성명 $= "속성값"] : 속성값이 점시로 끝나는 요소를 선택
        [속성명 ^= "속성값"] : 속성값이 접두사로 시작하는 요소를 선택
        [속성명 |= "속성값"] : 속성값이 완벽히 일치하거나, 
                            접두사로 존재하는 '-'으로 연결된 요소를 선택
        
        ex) 접두사 : 앞에 붙는 것, apple로 시작하는 것
        [name ^= "apple"]{
            ...CSS문법
        }

        input name="apple"
        input name="appleHouse"

----------------------------------------------------------------------

    가상 클래스 선택자
        -클래스를 추가할 필요 없이 요소(태그) 중에서 순서에 따라 원하는 특정 요소를 선택하여 스타일을 지정

        ex)
            <ul> ---- 선택자로 선택해서
                <li>
                <li> --- 두번째 li
                <li>
            </ul>

            ul > li:nth-child(2){
                ...CSS문법
            }

            :first-child      -> 첫번째 자식에 해당하는 요소
            :last-child       -> 마지막 자식에 해당하는 요소
            :nth-child(n)     -> n번째 자식에 해당하는 요소
            :nth-child(odd)   -> 홀수번째 해당하는 요소
            :nth-child(even)  -> 짝수번째 해당하는 요소
----------------------------------------------------------------------

    가상 요소 선택자    

        선택자::before
        선택자::after
                글, 이미지, 그라데이션 등을 요소 앞 혹은 뒤에 가상 태그를 삽입

        <하이퍼링크>
        :link
            하이퍼링크가 연결되었을 때
        :visited
            특정 하이퍼링크를 방문한 적이 있을 때

        :active
            마우스가 클릭하고 있을 때
        :hover
            마우스가 해당 요소에 올라갔을 때
        
        ::placeholder
            입력 폼 태그의 placeholder의 CSS를 부여

        :focus 
            입력 폼 
            태그를 클릭해서 활성화 되어있을 때
        
 

